## Golden Rule: Data Flow Pattern

### Write Operations
1. Validate input against TypeScript interfaces
2. Update KV store with new state
3. Update global list/indices
4. Broadcast changes via KV broadcast
5. Return JSON response
6. Client renders UI update

### Read Operations
1. Check permissions
2. Query KV store
3. Transform to TypeScript types
4. Return JSON response
5. Client renders UI

### Balance Management Pattern
1. NEVER calculate balance in UI components
2. Use transaction list as source of truth:
   ```tsx
   // When transactions change
   const calculateBalance = (transactions: Transaction[]) => {
     return transactions.reduce((sum, tx) => sum + tx.amount, 0);
   };
   ```
3. Store balance in KV after each transaction update:
   ```tsx
   // After transaction list changes
   const newBalance = calculateBalance(transactions);
   await kv.atomic()
     .set(["balances", userId], newBalance)
     .broadcast("balance-updates", { userId, balance: newBalance })
     .commit();
   ```
4. Components subscribe to balance updates:
   ```tsx
   // In balance display component
   useEffect(() => {
     const bc = new BroadcastChannel("balance-updates");
     bc.onmessage = (event) => {
       if (event.data.userId === userId) {
         setBalance(event.data.balance);
       }
     };
     return () => bc.close();
   }, [userId]);
   ```
5. Balance-modifying functions MUST:
   - Update transactions first
   - Let transaction updates trigger balance recalculation
   - NEVER modify balance directly
6. Balance reads MUST:
   - Subscribe to balance updates
   - Fall back to transaction list calculation if needed
   - Cache balance locally for performance

### Client-Side Script Pattern
1. NEVER use dangerouslySetInnerHTML for any scripts
2. Use Fresh's built-in script handling in Head:
   ```tsx
   const MY_SCRIPT = `
   // Your client-side script logic here
   `;
   
   // In _app.tsx or layout
   <Head>
     <script id="my-script">{MY_SCRIPT}</script>
   </Head>
   ```
3. Keep scripts in constants outside the component
4. Always add an id to scripts for debugging
5. Check for API availability (e.g., localStorage, indexedDB)
6. Handle errors gracefully

### Theme Persistence Pattern
1. Apply theme script before content renders to prevent flash
2. Keep theme logic in island components for client-side updates
3. Use data-theme attribute for DaisyUI theme switching
4. Example implementation:
   ```tsx
   const THEME_SCRIPT = `
   if (typeof localStorage !== 'undefined') {
     const theme = localStorage.getItem('theme') || 'light';
     document.documentElement.setAttribute('data-theme', theme);
   }
   `;
   ```

### Payment Flow
1. User initiates purchase -> Stripe Checkout
2. Stripe Webhook confirms payment
3. Store Stripe transaction in KV (Stripe is source of truth)
4. KV broadcast notifies components
5. Components update UI

### DO NOT MAKE THINGS UP
1. If you don't know something, admit it
2. Search documentation or the web for answers
3. Ask for clarification if needed
4. NEVER guess or invent solutions
5. Show your sources when providing solutions

### Route Protection
1. Use Fresh handlers for auth/protection
2. Use Fresh layouts for shared auth logic
3. Use Fresh state injection when needed
4. Only if Fresh can't do it, consider Hono
5. NEVER roll custom middleware unless explicitly required

### Authentication (ALWAYS USE KINDE SDK)
1. ALWAYS use Kinde SDK methods directly
2. NEVER build auth URLs manually
3. NEVER handle auth state manually
4. Let Kinde handle all social logins
5. Use Kinde's built-in UI for login/register
6. Only customize auth UI when absolutely required

### Browser APIs in Deno
1. ALWAYS use globalThis instead of window
2. NEVER use window.location, use globalThis.location
3. NEVER use window.history, use globalThis.history
4. NEVER use window.document, use globalThis.document
5. NEVER use window.localStorage, use KV store instead
6. NEVER use window.sessionStorage, use KV store instead

#### TECH stack
Deno 2
Fresh 1.7.3
Kinde Auth
Indexeddb
Daisy UI 4.12.14
Material Icons (Google Fonts)

#### Common Issues & Solutions
1. Icon Libraries:
   - Use Material Icons from Google Fonts CDN
   - Add stylesheet link in Head: `<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />`
   - Use with span elements: `<span class="material-icons">icon_name</span>`
   - Common icons: schedule, login, email, person_add

2. Client-Side Components:
   - Use islands for any component with client-side logic
   - Move event handlers and state to island components
   - Keep route components purely server-side
   - Example structure:
     ```tsx
     // routes/page.tsx (server component)
     import MyButton from "../islands/MyButton.tsx";
     
     export default function Page() {
       return <MyButton />;
     }

     // islands/MyButton.tsx (client component)
     import { useState } from "preact/hooks";

     export default function MyButton() {
       const [state, setState] = useState();
       const handleClick = () => {};
       return <button onClick={handleClick}>Click</button>;
     }
     ```

3. NPM Compatibility:
   - Keep nodeModulesDir as "auto" in deno.json
   - Use npm: prefix for npm packages in import map
   - Deno 2 has full npm compatibility

4. Environment:
   - Always load .env using std/dotenv
   - Use proper import paths (std/dotenv/load.ts)
   - Test environment variables separately from main app

5. Browser APIs:
   - Use globalThis instead of window
   - Example: `globalThis.location.href = url`
   - Keep browser API calls in island components
