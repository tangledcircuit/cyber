## Golden Rule: ALWAYS USE FRESH BUILT-IN SOLUTIONS FIRST

### DO NOT MAKE THINGS UP
1. If you don't know something, admit it
2. Search documentation or the web for answers
3. Ask for clarification if needed
4. NEVER guess or invent solutions
5. Show your sources when providing solutions

### Route Protection
1. Use Fresh handlers for auth/protection
2. Use Fresh layouts for shared auth logic
3. Use Fresh state injection when needed
4. Only if Fresh can't do it, consider Hono
5. NEVER roll custom middleware unless explicitly required

### Authentication (ALWAYS USE KINDE SDK)
1. ALWAYS use Kinde SDK methods directly
2. NEVER build auth URLs manually
3. NEVER handle auth state manually
4. Let Kinde handle all social logins
5. Use Kinde's built-in UI for login/register
6. Only customize auth UI when absolutely required

### Write Operations
1. Validate input against TypeScript interfaces
2. Update KV store with new state
3. Update global list/indices
4. Broadcast changes via SSE
5. Return JSON response
6. Client renders UI update

### Read Operations
1. Use Fresh handlers for permission checks
2. Query KV store
3. Transform to TypeScript types
4. Return JSON response
5. Client renders UI

#### TECH stack
Deno 2
Fresh 1.7.3
DaisyUI 4.12.14
Material Icons (Google Fonts)

#### Common Issues & Solutions
1. Icon Libraries:
   - Use Material Icons from Google Fonts CDN
   - Add stylesheet link in Head: `<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />`
   - Use with span elements: `<span class="material-icons">icon_name</span>`
   - Common icons: schedule, login, email, person_add

2. Client-Side Components:
   - Use islands for any component with client-side logic
   - Move event handlers and state to island components
   - Keep route components purely server-side
   - Example structure:
     ```tsx
     // routes/page.tsx (server component)
     import MyButton from "../islands/MyButton.tsx";
     
     export default function Page() {
       return <MyButton />;
     }

     // islands/MyButton.tsx (client component)
     import { useState } from "preact/hooks";

     export default function MyButton() {
       const [state, setState] = useState();
       const handleClick = () => {};
       return <button onClick={handleClick}>Click</button>;
     }
     ```

3. NPM Compatibility:
   - Keep nodeModulesDir as "auto" in deno.json
   - Use npm: prefix for npm packages in import map
   - Deno 2 has full npm compatibility

4. Environment:
   - Always load .env using std/dotenv
   - Use proper import paths (std/dotenv/load.ts)
   - Test environment variables separately from main app

5. Browser APIs:
   - Use globalThis instead of window
   - Example: `globalThis.location.href = url`
   - Keep browser API calls in island components
